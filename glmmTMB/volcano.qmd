---
title: "`glmmTMB` volcanos demonstration"
author: "Adam Howes"
date: "`r Sys.Date()`"
toc: true
number-sections: true
format: 
  html: 
    code-fold: false
    html-math-method: katex
---

# Background

This demonstration is based upon the spatial covariance [example](https://cran.r-project.org/web/packages/glmmTMB/vignettes/covstruct.html#a-spatial-covariance-example) from the `glmmTMB` vignette. 

```{r}
#| message: false
#| warning: false

devtools::install_github("glmmTMB/glmmTMB/glmmTMB", ref = "priors")

library(glmmTMB)
library(tmbstan)
library(dplyr)
library(ggplot2)
library(patchwork)

rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1) # does this help with glmmTMB?
```

```{r}
df <- data.frame(
  x = as.vector(row(volcano)),
  y = as.vector(col(volcano)),
  z = as.vector(volcano) + rnorm(length(volcano), sd = 15)
) |>
  mutate(
    group = factor(rep(1, n())),
    pos = numFactor(x = x, y = y)
  )

# This is how the complete volcano data looks

complete_plot <- ggplot(df, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(title = "Complete data") +
  theme_minimal()

df_sample <- dplyr::sample_n(df, 100)

partial_plot <- ggplot(df_sample, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(title = "Sampled data") +
  theme_minimal()

complete_plot / partial_plot
```

# Inference with empirical Bayes and a Laplace approximation via `TMB`

```{r}
# Fit the model using glmmTMB
fit_glmmtmb <- glmmTMB(z ~ 1 + exp(pos + 0 | group), data = df_sample)

# This section is slow to run

# df$zhat <- predict(fit_glmmtmb, newdata = df, type = "response", allow.new.levels = TRUE)
# 
# inferred_plot <- ggplot(df, aes(x = x, y = y, fill = zhat)) +
#   geom_tile() +
#   scale_fill_viridis_c() +
#   labs(title = "Inferred surface") +
#   theme_minimal()
# 
# inferred_plot + complete_plot
```

# Using priors

The possible parameters of a `glmmTMB` model are:

* `beta`, `betazi`, `betad` (fixed-effect parameters for conditional, zero-inflation, dispersion models); * `b`, `bzi` (conditional modes for conditional and zero-inflation models);
* `theta`, `thetazi` (random-effect parameters, on the standard deviation/Cholesky scale, for conditional and z-i models);
* `psi` (extra family parameters, e.g., shape for Tweedie models).

We are using the spatial exponential random effect model `exp`.
Let $\theta_1$ be the log standard deviation and $\theta_2$ be the log scale parameter.
The formula for the Gaussian covariance is
$$
\rho = \exp(\theta_1) \cdot \exp \left(\frac{d^2}{\exp(\theta_2)^2} \right).
$$
```{r}
# A wide prior on the intercept
priors <- data.frame(
  prior = "normal(0,200)",
  class = "fixef"
)

# Fit the model using glmmTMB
fit_glmmtmb_priors <- glmmTMB::glmmTMB(z ~ 1 + exp(pos + 0 | group), data = df_sample, priors = priors)

# As beta estimates are different with and without the prior looks like it's working
fit_glmmtmb$sdr
fit_glmmtmb_priors$sdr

# What about a prior on theta (both components?)
# TODO
```

# Inference with Hamiltonian Monte Carlo via `tmbstan`

```{r}
# This takes a long time to run

# Use the same objective function to run inference with tmbstan
# fit_hmc <- tmbstan(fit_glmmtmb$obj, iter = 300)
# hmc_samples <- rstan::extract(fit_hmc)
# 
# n_samples <- nrow(hmc_samples[[1]])
# par_names <- names(fit_glmmtmb$fit$par)
# 
# tictoc::tic()
# 
# hmc_newparam <- tidyr::expand_grid(i = 1:n_samples, par_name = unique(par_names)) |>
#   mutate(newparam = purrr::map2(i, par_name, ~ as.matrix(hmc_samples[[.y]])[.x, ])) %>%
#   group_by(i) |>
#   summarise(newparam = list(unlist(newparam))) |>
#   pull(newparam)
# 
# hmc_pred_list <- purrr::map(hmc_newparam, function(.x) predict(fit_glmmtmb, type = "response", newparams = .x))
# hmc_pred_matrix <- do.call(rbind, hmc_pred_list)
# hmc_pred <- colMeans(hmc_pred_matrix)
# 
# tictoc::toc()
# 
# pred <- predict(fit_glmmtmb, type = "response")
# 
# ggplot(data.frame(x = pred, y = hmc_pred), aes(x = x, y = y)) +
#   geom_point() +
#   coord_fixed() +
#   lims(x = c(min(pred), max(pred)), y = c(min(pred), max(pred))) +
#   geom_abline(intercept = 0, slope = 1, col = "grey", linetype = "dashed") +
#   labs(x = "glmmTMB prediction", y = "tmbstan prediction") +
#   theme_minimal()
# 
# rhat <- bayesplot::rhat(fit_hmc)
# bayesplot::mcmc_rhat(rhat)
# rhat[order(rhat)]
# 
# bayesplot::mcmc_trace(fit_hmc, pars = c("theta[1]", "theta[2]"))
```

# Computing environment

```{r}
sessionInfo()
```