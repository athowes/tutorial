---
title: "`glmmTMB` volcanos demonstration"
author: "Adam Howes"
date: "`r Sys.Date()`"
toc: true
number-sections: true
format: 
  html: 
    code-fold: false
    html-math-method: katex
---

# Background

This demonstration is based upon the spatial covariance [example](https://cran.r-project.org/web/packages/glmmTMB/vignettes/covstruct.html#a-spatial-covariance-example.
) from the `glmmTMB` vignette. 

```{r}
#| message: false
#| warning: false

library(glmmTMB)
library(tmbstan)
library(dplyr)
library(ggplot2)
library(patchwork)

rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1) # does this help with glmmTMB?
```

```{r}
df <- data.frame(
  x = as.vector(row(volcano)),
  y = as.vector(col(volcano)),
  z = as.vector(volcano) + rnorm(length(volcano), sd = 15)
)

# This is how the complete volcano data looks

complete_plot <- ggplot(df, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(title = "Complete data") +
  theme_minimal()

df_sample <- dplyr::sample_n(df, 100)

partial_plot <- ggplot(df_sample, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(title = "Sampled data") +
  theme_minimal()

complete_plot / partial_plot

df_sample <- df_sample |>
  mutate(
    pos = numFactor(x, y),
    group = factor(rep(1, nrow(df_sample)))
  )
```

# Inference with empirical Bayes and a Laplace approximation via `TMB`

```{r}
# Fit the model using glmmTMB
fit_glmmtmb <- glmmTMB(z ~ 1 + exp(pos + 0 | group), data = df_sample)
```

# Inference with Hamiltonian Monte Carlo via `tmbstan`

```{r}
# Use the same objective function to run inference with tmbstan
# fit_hmc <- tmbstan(fit_glmmtmb$obj, iter = 300)
# hmc_samples <- rstan::extract(fit_hmc)
# 
# n_samples <- nrow(hmc_samples[[1]])
# par_names <- names(fit_glmmtmb$fit$par)
# 
# tictoc::tic()
# 
# hmc_newparam <- tidyr::expand_grid(i = 1:n_samples, par_name = unique(par_names)) |>
#   mutate(newparam = purrr::map2(i, par_name, ~ as.matrix(hmc_samples[[.y]])[.x, ])) %>%
#   group_by(i) |>
#   summarise(newparam = list(unlist(newparam))) |>
#   pull(newparam)
# 
# hmc_pred_list <- purrr::map(hmc_newparam, function(.x) predict(fit_glmmtmb, type = "response", newparams = .x))
# hmc_pred_matrix <- do.call(rbind, hmc_pred_list)
# hmc_pred <- colMeans(hmc_pred_matrix)
# 
# tictoc::toc()
# 
# pred <- predict(fit_glmmtmb, type = "response")
# 
# ggplot(data.frame(x = pred, y = hmc_pred), aes(x = x, y = y)) +
#   geom_point() +
#   coord_fixed() +
#   lims(x = c(min(pred), max(pred)), y = c(min(pred), max(pred))) +
#   geom_abline(intercept = 0, slope = 1, col = "grey", linetype = "dashed") +
#   labs(x = "glmmTMB prediction", y = "tmbstan prediction") +
#   theme_minimal()
# 
# rhat <- bayesplot::rhat(fit_hmc)
# bayesplot::mcmc_rhat(rhat)
# rhat[order(rhat)]
# 
# bayesplot::mcmc_trace(fit_hmc, pars = c("theta[1]", "theta[2]"))
```

# To-do

* Try priors `glmmTMB` branch. Currently having a hard time sampling from model without priors

# Computing environment

```{r}
sessionInfo()
```